[{"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\index.js":"1","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\App.js":"2","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\reportWebVitals.js":"3","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Login\\index.js":"4","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Login\\components\\form.js":"5","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Register\\index.js":"6","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Register\\components\\form.js":"7","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\network\\auth.js":"8","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\network\\api.js":"9","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\index.js":"10","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\nav.js":"11","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\sidemenu.js":"12","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\project.js":"13","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\network\\user.js":"14","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\utils\\utils.js":"15","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\createlist.js":"16","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\createtask.js":"17"},{"size":559,"mtime":1610637611273,"results":"18","hashOfConfig":"19"},{"size":551,"mtime":1610917270808,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1610631328838,"results":"21","hashOfConfig":"19"},{"size":1716,"mtime":1612025782095,"results":"22","hashOfConfig":"19"},{"size":3040,"mtime":1610824423783,"results":"23","hashOfConfig":"19"},{"size":1644,"mtime":1610841258324,"results":"24","hashOfConfig":"19"},{"size":3392,"mtime":1610824355516,"results":"25","hashOfConfig":"19"},{"size":464,"mtime":1611414512471,"results":"26","hashOfConfig":"19"},{"size":154,"mtime":1610831395338,"results":"27","hashOfConfig":"19"},{"size":6872,"mtime":1612026120504,"results":"28","hashOfConfig":"19"},{"size":6408,"mtime":1612026139475,"results":"29","hashOfConfig":"19"},{"size":1702,"mtime":1612024214792,"results":"30","hashOfConfig":"19"},{"size":1277,"mtime":1611649215329,"results":"31","hashOfConfig":"19"},{"size":1113,"mtime":1612025994762,"results":"32","hashOfConfig":"19"},{"size":224,"mtime":1612025748914,"results":"33","hashOfConfig":"19"},{"size":1159,"mtime":1611436925212,"results":"34","hashOfConfig":"19"},{"size":1118,"mtime":1611490974289,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1wshp4d",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\index.js",[],["78","79"],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\App.js",[],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\reportWebVitals.js",[],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Login\\index.js",[],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Login\\components\\form.js",["80","81","82","83"],"import React from \"react\";\r\nimport { Formik, /*useFormikContext*/ } from \"formik\";\r\nimport { Input, Form, SubmitButton } from 'formik-antd';\r\nimport { UserOutlined, MailOutlined } from '@ant-design/icons';\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport { Alert, Button, Space, Row, Col, Typography } from \"antd\";\r\n\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <Formik\r\n        initialValues={props.initialValues}\r\n        validate={props.formValidate}\r\n        onSubmit={props.handleFormSubmit}\r\n        validateOnMount={true}\r\n        >\r\n        {({\r\n            isValid,\r\n            handleSubmit,\r\n        }) => (\r\n            <Row align=\"middle\" justify=\"center\" style={{height: \"100vh\"}}>\r\n                <Col xs={{ span: 24}} md={{ span:12 }} lg={{ span: 8}}>\r\n                    <Form onSubmit={{handleSubmit}} style={{padding: \"2rem\"}}>\r\n                        <Typography.Title level={4} style={{textAlign: \"center\", marginBottom: \"2rem\"}}>Log in</Typography.Title>\r\n                        <Alert\r\n                            message={props.feedBack ? props.feedBack.message : \"\"}\r\n                            type={props.feedBack ? props.feedBack.type : \"\"}\r\n                            showIcon\r\n                            style={{marginBottom: \"1.5rem\", display: !props.feedBack.message ? \"None\" : \"\"}}\r\n                        />\r\n                        <Row gutter={[24, 24]}>\r\n                            <Col xs={{ span: 24}} md={{ span:24 }} lg={{ span: 24}}>\r\n                                <Input name=\"email\" type=\"email\" placeholder=\"Enter email\" size=\"large\" prefix={<MailOutlined />} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutter={[24, 24]}>\r\n                            <Col xs={{ span: 24}} md={{ span:24 }} lg={{ span: 24}}>\r\n                                <Input \r\n                                    name=\"password\" \r\n                                    type=\"password\" \r\n                                    placeholder=\"Enter password\" \r\n                                    size=\"large\" \r\n                                    prefix={<EyeInvisibleOutlined />}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutter={[24, 24]}>\r\n                            <Col xs={{ span: 24 }} md={{ span: 24 }} lg={{ span: 24 }}>\r\n                            <SubmitButton\r\n                                style={{backgroundColor: \"#4287f5\", color: \"white\"}}\r\n                                block\r\n                                disabled={!isValid}\r\n                                size=\"large\"\r\n                            >\r\n                                Login\r\n                            </SubmitButton>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row> \r\n        )}\r\n        </Formik>\r\n    )\r\n};\r\n\r\nexport default LoginForm;","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Register\\index.js",[],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\Register\\components\\form.js",["84","85","86"],"import React from \"react\";\r\nimport { Formik, /*useFormikContext*/ } from \"formik\";\r\nimport { Input, Form, SubmitButton } from 'formik-antd';\r\nimport { UserOutlined, MailOutlined } from '@ant-design/icons';\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport { Alert, Button, Space, Row, Col, Typography } from \"antd\";\r\n\r\n\r\n\r\nconst RegisterForm = (props) => {\r\n    return (\r\n        <Formik\r\n        initialValues={props.initialValues}\r\n        validate={props.formValidate}\r\n        onSubmit={props.handleFormSubmit}\r\n        validateOnMount={true}\r\n        >\r\n        {({\r\n            isValid,\r\n            handleSubmit,\r\n        }) => (\r\n            <Row align=\"middle\" justify=\"center\" style={{height: \"100vh\"}}>\r\n                <Col xs={{ span: 24}} md={{ span:12 }} lg={{ span: 8}}>\r\n                    <Form onSubmit={{handleSubmit}} style={{padding: \"2rem\"}}>\r\n                        <Typography.Title level={4} style={{textAlign: \"center\", marginBottom: \"2rem\"}}>Sign Up</Typography.Title>\r\n                        <Alert\r\n                            message={props.feedBack ? props.feedBack.message : \"\"}\r\n                            type={props.feedBack ? props.feedBack.type : \"\"}\r\n                            showIcon\r\n                            style={{marginBottom: \"1.5rem\", display: !props.feedBack.message ? \"None\" : \"\"}}\r\n                        />\r\n                        <Row gutter={[24, 24]}>\r\n                            <Col xs={{ span: 24}} md={{ span:24 }} lg={{ span: 24}}>\r\n                                <Input name=\"username\" type=\"text\" placeholder=\"Enter username\" size=\"large\" prefix={<UserOutlined />} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutter={[24, 24]}>\r\n                            <Col xs={{ span: 24}} md={{ span:24 }} lg={{ span: 24}}>\r\n                                <Input name=\"email\" type=\"email\" placeholder=\"Enter email\" size=\"large\" prefix={<MailOutlined />} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutter={[24, 24]}>\r\n                            <Col xs={{ span: 24}} md={{ span:24 }} lg={{ span: 24}}>\r\n                                <Input \r\n                                    name=\"password\" \r\n                                    type=\"password\" \r\n                                    placeholder=\"Enter password\" \r\n                                    size=\"large\" \r\n                                    prefix={<EyeInvisibleOutlined />}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row gutter={[24, 24]}>\r\n                            <Col xs={{ span: 24 }} md={{ span: 24 }} lg={{ span: 24 }}>\r\n                            <SubmitButton\r\n                                style={{backgroundColor: \"#4287f5\", color: \"white\"}}\r\n                                block\r\n                                disabled={!isValid}\r\n                                size=\"large\"\r\n                            >\r\n                                Register\r\n                            </SubmitButton>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row> \r\n        )}\r\n        </Formik>\r\n    )\r\n};\r\n\r\nexport default RegisterForm;","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\network\\auth.js",["87"],"import axios from \"./api\";\r\nimport { grabUserToken } from \"../utils/utils\";\r\n\r\n\r\nexport const createUserRequest = (payload) => {\r\n    return axios.post(\"register\", payload)\r\n}\r\n\r\nexport const loginUserRequest = (payload) => {\r\n    return axios.post(\"login\", payload)\r\n}\r\n\r\nexport const refreshTokenRequest = () => {\r\n    const token = grabUserToken();\r\n    return axios.post(\"refresh\", {}, {\r\n        headers: {\r\n            Authorization: \"\"\r\n        }\r\n    })\r\n}","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\network\\api.js",[],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\index.js",["88","89","90"],"import React, { useState, useEffect, useHistory } from \"react\";\r\nimport NavBar from \"./components/nav\";\r\nimport SideMenu from \"./components/sidemenu\";\r\nimport ProjectView from \"./components/project\";\r\nimport { Menu } from 'antd';\r\nimport { fetchUserListRequest, createListRequest, createTaskRequest, logoutRequest } from \"../../network/user\";\r\nimport CreateListModal from \"./components/createlist\";\r\nimport CreateTaskModal from \"./components/createtask\";\r\nimport { deleteUserToken } from \"../../utils/utils\";\r\n//import { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\r\n\r\n\r\n\r\nconst DashBoard = () => {\r\n\r\n    const [ toggleState, setToggleState ] = useState(true);\r\n    const [ menuWidth, setMenuWidth ] = useState(\"\");\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ currentList, setCurrentList ] = useState({});\r\n\r\n    //FOR CREATE PROJECT MODAL\r\n    const [isListModalVisible, setIsListModalVisible] = useState(false);\r\n    const [ listModalState, setListModalState ] = useState({buttonState: false, currentName: \"\", isLoading: false});\r\n    const [createListFeedBack, setCreateListFeedBack ] = useState({});\r\n\r\n    //FOR ADD TASK MODAL\r\n    const [isTaskModalVisible, setIsTaskModalVisible] = useState(false);\r\n    const [ taskModalState, setTaskModalState ] = useState({buttonState: false, currentName: \"\", isLoading: false});\r\n    const [createTaskFeedBack, setCreateTaskFeedBack ] = useState({});\r\n\r\n    \r\n\r\n    //Function to Change the current Value of the CreateProject Modal Input\r\n    const changeCurrentListValue = (value) => {\r\n      setListModalState({buttonState: !!value, currentName: value, isLoading: listModalState.isLoading});\r\n    }\r\n\r\n    const changeCurrentList = (key, e) => {\r\n        var selectedList = userList.filter(list=>list.id==key.key);\r\n        if (selectedList.length>0){\r\n            setCurrentList(selectedList[0]);\r\n        }\r\n    }\r\n\r\n    //Function to be called when CreateProject Modal Button is Clicked\r\n    const handleCreateListButtonClick = () => {\r\n        setListModalState({buttonState: listModalState.buttonState, currentName: listModalState.currentName, isLoading: true});\r\n        createListRequest({name: listModalState.currentName}).then(\r\n            resp=>{\r\n            setCreateListFeedBack({message: \"Successfully Created\", type: \"success\"});\r\n            setListModalState({buttonState: false, currentName: \"\", isLoading: false});\r\n            setUserList(userList.concat(resp.data))\r\n            setIsListModalVisible(false)},\r\n            err=>{\r\n                setCreateListFeedBack({message: \"An Error Occured. Please Try Again\", type: \"error\"});\r\n                setListModalState({buttonState: true, currentName: listModalState.currentName, isLoading: false});\r\n            }\r\n        )\r\n    }\r\n\r\n    const showListModal = () => {\r\n        setIsListModalVisible(true);\r\n    };\r\n\r\n    const handleLogout = () => {\r\n        logoutRequest().then(\r\n            resp=>{\r\n                console.log(resp.data);\r\n                deleteUserToken();\r\n                window.location.pathname = \"/login\";\r\n            },\r\n            err=>console.log(err)\r\n        )\r\n    }\r\n\r\n    //Function to Change the current Value of the Add Task Modal Input\r\n    const changeCurrentTaskValue = (value) => {\r\n      setTaskModalState({buttonState: !!value, currentName: value, isLoading: taskModalState.isLoading});\r\n    }\r\n\r\n    const showTaskModal = () => {\r\n        setIsTaskModalVisible(true);\r\n    };\r\n\r\n    //Function to be called when CreateTask Modal Button is Clicked\r\n    const handleCreateTaskButtonClick = () => {\r\n        setTaskModalState({buttonState: taskModalState.buttonState, currentName: taskModalState.currentName, isLoading: true});\r\n        createTaskRequest({name: taskModalState.currentName}, currentList.id).then(\r\n            resp=>{\r\n            setCreateTaskFeedBack({message: \"Successfully Created\", type: \"success\"});\r\n            setTaskModalState({buttonState: false, currentName: \"\", isLoading: false});\r\n            var newTasks = currentList.tasks.concat(resp.data);\r\n            var newList = currentList;\r\n            newList.tasks = newTasks;\r\n            setCurrentList(newList)\r\n            setIsTaskModalVisible(false)},\r\n            err=>{\r\n                setCreateTaskFeedBack({message: \"An Error Occured. Please Try Again\", type: \"error\"});\r\n                setTaskModalState({buttonState: true, currentName: listModalState.currentName, isLoading: false});\r\n            }\r\n        )\r\n    }\r\n\r\n    const handleListModalCancel = () => {\r\n        setIsListModalVisible(false);\r\n    };\r\n\r\n    const handleTaskModalCancel = () => {\r\n        setIsTaskModalVisible(false);\r\n    };\r\n\r\n\r\n    useEffect(()=>{\r\n        fetchUserListRequest().then(\r\n            resp=>{ \r\n                setUserList(resp.data.lists);\r\n                if (resp.data.lists.length>0){\r\n                    setCurrentList(resp.data.lists[0])\r\n                } },\r\n            err=>console.log(err)\r\n        )\r\n    }, [])\r\n\r\n    const handleClick = () => {\r\n        setToggleState(!toggleState);\r\n        if (menuWidth === \"\"){\r\n            setMenuWidth(256)\r\n        } else {\r\n            setMenuWidth(\"\")\r\n        }\r\n    }\r\n\r\n    const { SubMenu } = Menu;\r\n\r\n    //const handleClick = () => {\r\n    //    console.log(\"I was clicked\")\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <NavBar handleClick={handleClick} showModal={showListModal} logout={handleLogout} />\r\n            <CreateListModal \r\n                handleCancel={handleListModalCancel}\r\n                isModalVisible={isListModalVisible}\r\n                createListRequest={createListRequest}\r\n                handleButtonClick={handleCreateListButtonClick}\r\n                modalState={listModalState}\r\n                changeCurrentValue={changeCurrentListValue}\r\n                feedBack={createListFeedBack}\r\n            />\r\n            <CreateTaskModal \r\n                handleCancel={handleTaskModalCancel}\r\n                isModalVisible={isTaskModalVisible}\r\n                createTaskRequest={createTaskRequest}\r\n                handleButtonClick={handleCreateTaskButtonClick}\r\n                modalState={taskModalState}\r\n                changeCurrentValue={changeCurrentTaskValue}\r\n                feedBack={createTaskFeedBack}\r\n            />\r\n            <div style={{display: \"flex\"}}>\r\n                <SideMenu \r\n                  toggleState={toggleState} \r\n                  menuWidth={menuWidth} \r\n                  changeCurrentList={changeCurrentList}\r\n                  currentList={currentList}\r\n                  userList={userList}\r\n                  logout={handleLogout} \r\n                />\r\n                <ProjectView currentList={currentList} showModal={showTaskModal} />\r\n            </div>        \r\n            \r\n        </>\r\n    )\r\n};\r\n\r\nexport default DashBoard;","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\nav.js",["91","92","93","94","95","96","97"],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\sidemenu.js",["98","99","100","101"],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\project.js",["102","103"],"import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Result, Button } from 'antd';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    //textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default function ProjectView(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root} key={props.currentList}>\r\n      <h1 style={{textAlign: \"center\", padding: \"1rem\"}}>{props.currentList.name}</h1>\r\n      {props.currentList.tasks?.length==0 ? <Result\r\n            status=\"404\"\r\n            title=\"\"\r\n            subTitle=\"You Have not Added Any Task for This Project.\"\r\n          /> : <></>\r\n      }\r\n      <Grid container spacing={1} style={{padding: \"1rem\"}}>\r\n        {props.currentList.tasks?.map(task=>\r\n          <Grid item xs={12}>\r\n           <Paper className={classes.paper} style={{color: \"black\"}}>{task.name}</Paper>\r\n          </Grid>\r\n        )}\r\n        <Button type=\"primary\" onClick={props.showModal} style={{marginTop: \"1rem\"}}>Add Task</Button>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\network\\user.js",[],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\utils\\utils.js",[],"C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\createlist.js",["104","105"],"import React, { useState } from 'react';\r\nimport { Modal, Button } from 'antd';\r\nimport { Input } from 'antd';\r\nimport { ProjectOutlined } from '@ant-design/icons';\r\nimport { isEmptyArray } from 'formik';\r\nimport { Alert } from 'antd';\r\n\r\n\r\n\r\nconst CreateListModal = (props) => {\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Create Project\" \r\n        visible={props.isModalVisible} \r\n        onOk={props.handleOk} \r\n        onCancel={props.handleCancel}\r\n        footer={\"\"} \r\n        centered\r\n      >\r\n        {props.feedBack.message ? <Alert message={props.feedBack.message} type={props.feedBack.type} style={{marginBottom: \"1rem\"}} showIcon /> : \"\"}\r\n        <Input size=\"large\" onChange={(e)=>props.changeCurrentValue(e.currentTarget.value)} placeholder=\"Project Name\" prefix={<ProjectOutlined />} />\r\n        <Button \r\n          type=\"primary\" \r\n          block style={{marginTop: \"1rem\"}} \r\n          disabled={!props.modalState.buttonState}\r\n          onClick={props.handleButtonClick}\r\n          loading={props.modalState.isLoading}\r\n        >\r\n            Submit\r\n        </Button>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateListModal;","C:\\Users\\Tecra Owner\\Desktop\\ergolista\\src\\Pages\\DashBoard\\components\\createtask.js",["106","107"],"import React, { useState } from 'react';\r\nimport { Modal, Button } from 'antd';\r\nimport { Input } from 'antd';\r\nimport { ProjectOutlined } from '@ant-design/icons';\r\nimport { isEmptyArray } from 'formik';\r\nimport { Alert } from 'antd';\r\n\r\n\r\n\r\nconst CreateTaskModal = (props) => {\r\n\r\n  return (\r\n    <>\r\n      <Modal title=\"Add Task\" \r\n        visible={props.isModalVisible} \r\n        onCancel={props.handleCancel}\r\n        footer={\"\"} \r\n        centered\r\n      >\r\n        {props.feedBack.message ? <Alert message={props.feedBack.message} type={props.feedBack.type} style={{marginBottom: \"1rem\"}} showIcon /> : \"\"}\r\n        <Input size=\"large\" onChange={(e)=>props.changeCurrentValue(e.currentTarget.value)} placeholder=\"Task Name\" prefix={<ProjectOutlined />} />\r\n        <Button \r\n          type=\"primary\" \r\n          block style={{marginTop: \"1rem\"}} \r\n          disabled={!props.modalState.buttonState}\r\n          onClick={props.handleButtonClick}\r\n          loading={props.modalState.isLoading}\r\n        >\r\n            Submit\r\n        </Button>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateTaskModal;",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":4,"column":10,"nodeType":"114","messageId":"115","endLine":4,"endColumn":22},{"ruleId":"112","severity":1,"message":"116","line":5,"column":32,"nodeType":"114","messageId":"115","endLine":5,"endColumn":42},{"ruleId":"112","severity":1,"message":"117","line":6,"column":17,"nodeType":"114","messageId":"115","endLine":6,"endColumn":23},{"ruleId":"112","severity":1,"message":"118","line":6,"column":25,"nodeType":"114","messageId":"115","endLine":6,"endColumn":30},{"ruleId":"112","severity":1,"message":"116","line":5,"column":32,"nodeType":"114","messageId":"115","endLine":5,"endColumn":42},{"ruleId":"112","severity":1,"message":"117","line":6,"column":17,"nodeType":"114","messageId":"115","endLine":6,"endColumn":23},{"ruleId":"112","severity":1,"message":"118","line":6,"column":25,"nodeType":"114","messageId":"115","endLine":6,"endColumn":30},{"ruleId":"112","severity":1,"message":"119","line":14,"column":11,"nodeType":"114","messageId":"115","endLine":14,"endColumn":16},{"ruleId":"112","severity":1,"message":"120","line":1,"column":38,"nodeType":"114","messageId":"115","endLine":1,"endColumn":48},{"ruleId":"121","severity":1,"message":"122","line":39,"column":57,"nodeType":"123","messageId":"124","endLine":39,"endColumn":59},{"ruleId":"112","severity":1,"message":"125","line":133,"column":13,"nodeType":"114","messageId":"115","endLine":133,"endColumn":20},{"ruleId":"112","severity":1,"message":"126","line":7,"column":8,"nodeType":"114","messageId":"115","endLine":7,"endColumn":17},{"ruleId":"112","severity":1,"message":"127","line":8,"column":8,"nodeType":"114","messageId":"115","endLine":8,"endColumn":13},{"ruleId":"112","severity":1,"message":"128","line":12,"column":8,"nodeType":"114","messageId":"115","endLine":12,"endColumn":18},{"ruleId":"112","severity":1,"message":"129","line":14,"column":8,"nodeType":"114","messageId":"115","endLine":14,"endColumn":16},{"ruleId":"112","severity":1,"message":"130","line":15,"column":8,"nodeType":"114","messageId":"115","endLine":15,"endColumn":25},{"ruleId":"112","severity":1,"message":"131","line":16,"column":8,"nodeType":"114","messageId":"115","endLine":16,"endColumn":16},{"ruleId":"112","severity":1,"message":"132","line":104,"column":9,"nodeType":"114","messageId":"115","endLine":104,"endColumn":29},{"ruleId":"112","severity":1,"message":"133","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"117","line":2,"column":16,"nodeType":"114","messageId":"115","endLine":2,"endColumn":22},{"ruleId":"112","severity":1,"message":"134","line":7,"column":3,"nodeType":"114","messageId":"115","endLine":7,"endColumn":21},{"ruleId":"112","severity":1,"message":"135","line":8,"column":3,"nodeType":"114","messageId":"115","endLine":8,"endColumn":19},{"ruleId":"112","severity":1,"message":"133","line":1,"column":16,"nodeType":"114","messageId":"115","endLine":1,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":24,"column":39,"nodeType":"123","messageId":"124","endLine":24,"endColumn":41},{"ruleId":"112","severity":1,"message":"133","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"136","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":22},{"ruleId":"112","severity":1,"message":"133","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"136","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":22},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'UserOutlined' is defined but never used.","Identifier","unusedVar","'EyeTwoTone' is defined but never used.","'Button' is defined but never used.","'Space' is defined but never used.","'token' is assigned a value but never used.","'useHistory' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'SubMenu' is assigned a value but never used.","'InputBase' is defined but never used.","'Badge' is defined but never used.","'SearchIcon' is defined but never used.","'MailIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'MoreIcon' is defined but never used.","'handleMobileMenuOpen' is assigned a value but never used.","'useState' is defined but never used.","'MenuUnfoldOutlined' is defined but never used.","'MenuFoldOutlined' is defined but never used.","'isEmptyArray' is defined but never used.","no-global-assign","no-unsafe-negation"]